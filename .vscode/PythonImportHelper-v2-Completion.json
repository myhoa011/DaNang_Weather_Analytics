[
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientSession",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientResponseError",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ServerDisconnectedError",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ClientResponseError",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "ServerDisconnectedError",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestClassifier",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "RandomForestRegressor",
        "importPath": "sklearn.ensemble",
        "description": "sklearn.ensemble",
        "isExtraImport": true,
        "detail": "sklearn.ensemble",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClusterData",
        "importPath": "src.backend.data_clustering.weather_model",
        "description": "src.backend.data_clustering.weather_model",
        "isExtraImport": true,
        "detail": "src.backend.data_clustering.weather_model",
        "documentation": {}
    },
    {
        "label": "WeatherData",
        "importPath": "src.backend.data_clustering.weather_model",
        "description": "src.backend.data_clustering.weather_model",
        "isExtraImport": true,
        "detail": "src.backend.data_clustering.weather_model",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "AsyncExitStack",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "WeatherCluster",
        "importPath": "src.backend.data_clustering.cluster_service",
        "description": "src.backend.data_clustering.cluster_service",
        "isExtraImport": true,
        "detail": "src.backend.data_clustering.cluster_service",
        "documentation": {}
    },
    {
        "label": "WeatherCluster",
        "importPath": "src.backend.data_clustering.cluster_service",
        "description": "src.backend.data_clustering.cluster_service",
        "isExtraImport": true,
        "detail": "src.backend.data_clustering.cluster_service",
        "documentation": {}
    },
    {
        "label": "Predict",
        "importPath": "src.backend.data_clustering.predict",
        "description": "src.backend.data_clustering.predict",
        "isExtraImport": true,
        "detail": "src.backend.data_clustering.predict",
        "documentation": {}
    },
    {
        "label": "Centroid",
        "importPath": "src.db_api.controid",
        "description": "src.db_api.controid",
        "isExtraImport": true,
        "detail": "src.db_api.controid",
        "documentation": {}
    },
    {
        "label": "CentroidsResponse",
        "importPath": "src.db_api.controid",
        "description": "src.db_api.controid",
        "isExtraImport": true,
        "detail": "src.db_api.controid",
        "documentation": {}
    },
    {
        "label": "Centroid",
        "importPath": "src.db_api.controid",
        "description": "src.db_api.controid",
        "isExtraImport": true,
        "detail": "src.db_api.controid",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AsyncIOScheduler",
        "importPath": "apscheduler.schedulers.asyncio",
        "description": "apscheduler.schedulers.asyncio",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOScheduler",
        "importPath": "apscheduler.schedulers.asyncio",
        "description": "apscheduler.schedulers.asyncio",
        "isExtraImport": true,
        "detail": "apscheduler.schedulers.asyncio",
        "documentation": {}
    },
    {
        "label": "CronTrigger",
        "importPath": "apscheduler.triggers.cron",
        "description": "apscheduler.triggers.cron",
        "isExtraImport": true,
        "detail": "apscheduler.triggers.cron",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "aiomysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiomysql",
        "description": "aiomysql",
        "detail": "aiomysql",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "WeatherData",
        "importPath": "src.db_api.weather",
        "description": "src.db_api.weather",
        "isExtraImport": true,
        "detail": "src.db_api.weather",
        "documentation": {}
    },
    {
        "label": "ClusterData",
        "importPath": "src.db_api.cluster",
        "description": "src.db_api.cluster",
        "isExtraImport": true,
        "detail": "src.db_api.cluster",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "CfgNode",
        "importPath": "yacs.config",
        "description": "yacs.config",
        "isExtraImport": true,
        "detail": "yacs.config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "cfg",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "WeatherCluster",
        "kind": 6,
        "importPath": "src.backend.data_clustering.cluster_service",
        "description": "src.backend.data_clustering.cluster_service",
        "peekOfCode": "class WeatherCluster:\n    def __init__(self):\n        \"\"\"\n        Khởi tạo WeatherCluster với các thành phần:\n        - KMeans: Thuật toán phân cụm.\n        - StandardScaler: Chuẩn hóa dữ liệu.\n        \"\"\"\n        self.db_api_url = os.getenv(\"DB_API_URL\")\n        self.session = None\n        self.scaler = StandardScaler()",
        "detail": "src.backend.data_clustering.cluster_service",
        "documentation": {}
    },
    {
        "label": "cluster",
        "kind": 5,
        "importPath": "src.backend.data_clustering.data_clustering",
        "description": "src.backend.data_clustering.data_clustering",
        "peekOfCode": "cluster = WeatherCluster()\npredict = Predict()\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    tasks = []\n    try:\n        # Startup: Initialize WeatherCluster and Predictor\n        logger.info(\"Initializing WeatherCluster and Predictor...\")\n        await cluster.connect()\n        logger.info(\"WeatherCluster initialized successfully.\")",
        "detail": "src.backend.data_clustering.data_clustering",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 5,
        "importPath": "src.backend.data_clustering.data_clustering",
        "description": "src.backend.data_clustering.data_clustering",
        "peekOfCode": "predict = Predict()\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    tasks = []\n    try:\n        # Startup: Initialize WeatherCluster and Predictor\n        logger.info(\"Initializing WeatherCluster and Predictor...\")\n        await cluster.connect()\n        logger.info(\"WeatherCluster initialized successfully.\")\n        # Define background tasks",
        "detail": "src.backend.data_clustering.data_clustering",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.backend.data_clustering.data_clustering",
        "description": "src.backend.data_clustering.data_clustering",
        "peekOfCode": "app = FastAPI(\n    title=\"Weather Prediction Service\",\n    description=\"Microservice for weather prediction using machine learning models.\",\n    version=\"1.0.0\",\n    lifespan=lifespan,  # Attach lifecycle manager\n)\norigins = [\n    \"http://localhost:3000\",  # Domain của frontend\n    # Thêm các domain khác nếu cần\n]",
        "detail": "src.backend.data_clustering.data_clustering",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "src.backend.data_clustering.data_clustering",
        "description": "src.backend.data_clustering.data_clustering",
        "peekOfCode": "origins = [\n    \"http://localhost:3000\",  # Domain của frontend\n    # Thêm các domain khác nếu cần\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # Chỉ định domain được phép\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Cho phép tất cả các phương thức (GET, POST, ...)\n    allow_headers=[\"*\"],  # Cho phép tất cả các headers",
        "detail": "src.backend.data_clustering.data_clustering",
        "documentation": {}
    },
    {
        "label": "Predict",
        "kind": 6,
        "importPath": "src.backend.data_clustering.predict",
        "description": "src.backend.data_clustering.predict",
        "peekOfCode": "class Predict:\n    def __init__(self):\n        \"\"\"\n        Initialize Predict class with RandomForest models and other utilities for weather data predictions.\n        \"\"\"\n        self.is_trained_temp = False\n        self.is_trained_season = False\n        self.last_trained_temp = None\n        self.last_trained_season = None\n        self.data_service = WeatherCluster()",
        "detail": "src.backend.data_clustering.predict",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.backend.data_clustering.predict",
        "description": "src.backend.data_clustering.predict",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Predict:\n    def __init__(self):\n        \"\"\"\n        Initialize Predict class with RandomForest models and other utilities for weather data predictions.\n        \"\"\"\n        self.is_trained_temp = False\n        self.is_trained_season = False\n        self.last_trained_temp = None\n        self.last_trained_season = None",
        "detail": "src.backend.data_clustering.predict",
        "documentation": {}
    },
    {
        "label": "Spider",
        "kind": 6,
        "importPath": "src.backend.data_clustering.spider",
        "description": "src.backend.data_clustering.spider",
        "peekOfCode": "class Spider:\n    def __init__(self):\n        self.db_api_url = os.getenv(\"DB_API_URL\")\n        self.session = None\n        self.features = [\"temp\", \"pressure\", \"humidity\", \"clouds\", \"visibility\", \"wind_speed\", \"wind_deg\"]\n    def process_data_for_spider_chart(self, df: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"\n        Xử lý dữ liệu để chuẩn bị cho việc vẽ Spider Chart cho 2 năm gần nhất.\n        Args:\n            df (pd.DataFrame): Dữ liệu thời tiết đã xử lý, bao gồm các cột:",
        "detail": "src.backend.data_clustering.spider",
        "documentation": {}
    },
    {
        "label": "WeatherCluster",
        "kind": 6,
        "importPath": "src.backend.data_clustering.test",
        "description": "src.backend.data_clustering.test",
        "peekOfCode": "class WeatherCluster:\n    def __init__(self):\n        \"\"\"\n        Initialize WeatherCluster with key components:\n        - KMeans for clustering.\n        - StandardScaler for data normalization.\n        - RandomForest models for regression and classification tasks.\n        \"\"\"\n        self.db_api_url = os.getenv(\"DB_API_URL\")\n        self.session = None",
        "detail": "src.backend.data_clustering.test",
        "documentation": {}
    },
    {
        "label": "WeatherData",
        "kind": 6,
        "importPath": "src.backend.data_clustering.weather_model",
        "description": "src.backend.data_clustering.weather_model",
        "peekOfCode": "class WeatherData(BaseModel):\n    temp: float  \n    pressure: int\n    humidity: int\n    clouds: int\n    visibility: Optional[int]\n    wind_speed: float\n    wind_deg: int\n    def get_formatted_time(self) -> str:\n        return datetime.fromtimestamp(self.dt).strftime(\"%Y-%m-%d %H:%M:%S\")",
        "detail": "src.backend.data_clustering.weather_model",
        "documentation": {}
    },
    {
        "label": "ClusterData",
        "kind": 6,
        "importPath": "src.backend.data_clustering.weather_model",
        "description": "src.backend.data_clustering.weather_model",
        "peekOfCode": "class ClusterData(BaseModel):\n    dt: int\n    temp: float  \n    pressure: int\n    humidity: int\n    clouds: int\n    visibility: Optional[int]\n    wind_speed: float\n    wind_deg: int\n    date: datetime",
        "detail": "src.backend.data_clustering.weather_model",
        "documentation": {}
    },
    {
        "label": "WeatherCrawler",
        "kind": 6,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "class WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0\n        self.calls_in_current_minute = 0\n        self.minute_start_time = datetime.now()\n        self.data_dir = \"data\"\n        self.data_file = os.path.join(self.data_dir, \"weather_data.json\")\n        self.timestamp_file = os.path.join(self.data_dir, \"last_timestamp.json\")\n        self.session = None",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "API_KEY",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "API_KEY = os.getenv('API_KEY')\nBASE_URL = os.getenv('BASE_URL')\nLAT = float(os.getenv('LAT'))\nLON = float(os.getenv('LON'))\nMAX_API_CALLS_PER_DAY = int(os.getenv('MAX_API_CALLS_PER_DAY'))\nMAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE'))\nMAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "BASE_URL = os.getenv('BASE_URL')\nLAT = float(os.getenv('LAT'))\nLON = float(os.getenv('LON'))\nMAX_API_CALLS_PER_DAY = int(os.getenv('MAX_API_CALLS_PER_DAY'))\nMAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE'))\nMAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "LAT",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "LAT = float(os.getenv('LAT'))\nLON = float(os.getenv('LON'))\nMAX_API_CALLS_PER_DAY = int(os.getenv('MAX_API_CALLS_PER_DAY'))\nMAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE'))\nMAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0\n        self.calls_in_current_minute = 0",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "LON",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "LON = float(os.getenv('LON'))\nMAX_API_CALLS_PER_DAY = int(os.getenv('MAX_API_CALLS_PER_DAY'))\nMAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE'))\nMAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0\n        self.calls_in_current_minute = 0\n        self.minute_start_time = datetime.now()",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "MAX_API_CALLS_PER_DAY",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "MAX_API_CALLS_PER_DAY = int(os.getenv('MAX_API_CALLS_PER_DAY'))\nMAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE'))\nMAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0\n        self.calls_in_current_minute = 0\n        self.minute_start_time = datetime.now()\n        self.data_dir = \"data\"",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "MAX_REQUESTS_PER_MINUTE",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "MAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE'))\nMAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0\n        self.calls_in_current_minute = 0\n        self.minute_start_time = datetime.now()\n        self.data_dir = \"data\"\n        self.data_file = os.path.join(self.data_dir, \"weather_data.json\")",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "MAX_RETRIES",
        "kind": 5,
        "importPath": "src.crawl_data.weather_crawler",
        "description": "src.crawl_data.weather_crawler",
        "peekOfCode": "MAX_RETRIES = int(os.getenv('MAX_RETRIES'))\nclass WeatherCrawler:\n    def __init__(self):\n        self.scheduler = AsyncIOScheduler()\n        self.total_calls_today = 0\n        self.calls_in_current_minute = 0\n        self.minute_start_time = datetime.now()\n        self.data_dir = \"data\"\n        self.data_file = os.path.join(self.data_dir, \"weather_data.json\")\n        self.timestamp_file = os.path.join(self.data_dir, \"last_timestamp.json\")",
        "detail": "src.crawl_data.weather_crawler",
        "documentation": {}
    },
    {
        "label": "DataIngestion",
        "kind": 6,
        "importPath": "src.data_ingestion.data_ingestion",
        "description": "src.data_ingestion.data_ingestion",
        "peekOfCode": "class DataIngestion:\n    def __init__(self, api_url):\n        \"\"\"Initialize DataIngestion with Database API URL\"\"\"\n        self.api_url = api_url\n        self.scheduler = AsyncIOScheduler()\n        self.data_path = os.getenv('DATA_PATH', 'data')\n        self.data_file = f\"{self.data_path}/weather_data.json\"\n        self.processed_file = f\"{self.data_path}/processed_data.json\"\n        self.session = None\n        # Create the data directory if it does not exist",
        "detail": "src.data_ingestion.data_ingestion",
        "documentation": {}
    },
    {
        "label": "ClusterData",
        "kind": 6,
        "importPath": "src.db_api.cluster",
        "description": "src.db_api.cluster",
        "peekOfCode": "class ClusterData(BaseModel):\n    dt: int\n    temp: float  \n    pressure: int\n    humidity: int\n    clouds: int\n    visibility: Optional[int]\n    wind_speed: float\n    wind_deg: int\n    date: datetime",
        "detail": "src.db_api.cluster",
        "documentation": {}
    },
    {
        "label": "Centroid",
        "kind": 6,
        "importPath": "src.db_api.controid",
        "description": "src.db_api.controid",
        "peekOfCode": "class Centroid(BaseModel):\n    cluster_name: str\n    temp: float\n    scaled_temp: float\n    @classmethod\n    def from_raw_data(cls, raw_data: dict) -> 'Centroid':\n        return cls(\n            cluster_name=raw_data.get(\"cluster_name\"),  # Updated to match the attribute name\n            scaled_temp=raw_data.get(\"scaled_temp\"),\n            temp=raw_data.get(\"temp\")",
        "detail": "src.db_api.controid",
        "documentation": {}
    },
    {
        "label": "CentroidsResponse",
        "kind": 6,
        "importPath": "src.db_api.controid",
        "description": "src.db_api.controid",
        "peekOfCode": "class CentroidsResponse(BaseModel):\n    status: str\n    data_cluster: List[Centroid]",
        "detail": "src.db_api.controid",
        "documentation": {}
    },
    {
        "label": "WeatherAPI",
        "kind": 6,
        "importPath": "src.db_api.db_api",
        "description": "src.db_api.db_api",
        "peekOfCode": "class WeatherAPI:\n    \"\"\"\n    Weather API class that handles database connections and service calls.\n    Provides methods for database operations and service integrations.\n    \"\"\"\n    def __init__(self):\n        \"\"\"Initialize WeatherAPI with database pool and service endpoints\"\"\"\n        self.pool = None\n        # Backend service endpoints for future integrations\n        self.service_urls = {",
        "detail": "src.db_api.db_api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.db_api.db_api",
        "description": "src.db_api.db_api",
        "peekOfCode": "app = FastAPI(\n    title=\"Weather API\",\n    lifespan=lifespan\n)\nweather_api = WeatherAPI()\n@app.post(\"/api/raw_weather/bulk\")\nasync def save_raw_weather_bulk(raw_data_list: List[WeatherData]) -> Dict[str, Any]:\n    \"\"\"\n    Save multiple raw weather data entries in bulk.\n    Args:",
        "detail": "src.db_api.db_api",
        "documentation": {}
    },
    {
        "label": "weather_api",
        "kind": 5,
        "importPath": "src.db_api.db_api",
        "description": "src.db_api.db_api",
        "peekOfCode": "weather_api = WeatherAPI()\n@app.post(\"/api/raw_weather/bulk\")\nasync def save_raw_weather_bulk(raw_data_list: List[WeatherData]) -> Dict[str, Any]:\n    \"\"\"\n    Save multiple raw weather data entries in bulk.\n    Args:\n        raw_data_list (List[WeatherData]): List of weather data objects to be saved\n    Returns:\n        Dict[str, Any]: Response containing count of saved entries and status message\n    Raises:",
        "detail": "src.db_api.db_api",
        "documentation": {}
    },
    {
        "label": "WeatherData",
        "kind": 6,
        "importPath": "src.db_api.weather",
        "description": "src.db_api.weather",
        "peekOfCode": "class WeatherData(BaseModel):\n    dt: int\n    temp: float  \n    pressure: int\n    humidity: int\n    clouds: int\n    visibility: Optional[int]\n    wind_speed: float\n    wind_deg: int\n    def get_formatted_time(self) -> str:",
        "detail": "src.db_api.weather",
        "documentation": {}
    },
    {
        "label": "Centroid",
        "kind": 6,
        "importPath": "src.db_api.weather",
        "description": "src.db_api.weather",
        "peekOfCode": "class Centroid(BaseModel):\n    cluster_name: str\n    scaled_temp: float\n    temp: float",
        "detail": "src.db_api.weather",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "src.frontend.node_modules.flatted.python.flatted",
        "description": "src.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "src.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "src.frontend.node_modules.flatted.python.flatted",
        "description": "src.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "src.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "src.frontend.node_modules.flatted.python.flatted",
        "description": "src.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "src.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "src.frontend.node_modules.flatted.python.flatted",
        "description": "src.frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "src.frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "src.frontend.node_modules.flatted.python.test",
        "description": "src.frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "src.frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "src.frontend.node_modules.plotly.js..circleci.download_google_fonts",
        "description": "src.frontend.node_modules.plotly.js..circleci.download_google_fonts",
        "peekOfCode": "def download(repo, family, types) :\n    for t in types :\n        name = family + t + '.ttf'\n        url = repo + name + '?raw=true'\n        print(url)\n        req = requests.get(url, allow_redirects=True)\n        open(dirOut + name, 'wb').write(req.content)\ndownload(\n    'https://github.com/googlefonts/noto-fonts/blob/main/hinted/ttf/NotoSansMono/',\n    'NotoSansMono',",
        "detail": "src.frontend.node_modules.plotly.js..circleci.download_google_fonts",
        "documentation": {}
    },
    {
        "label": "dirOut",
        "kind": 5,
        "importPath": "src.frontend.node_modules.plotly.js..circleci.download_google_fonts",
        "description": "src.frontend.node_modules.plotly.js..circleci.download_google_fonts",
        "peekOfCode": "dirOut = '.circleci/fonts/truetype/googleFonts/'\ndef download(repo, family, types) :\n    for t in types :\n        name = family + t + '.ttf'\n        url = repo + name + '?raw=true'\n        print(url)\n        req = requests.get(url, allow_redirects=True)\n        open(dirOut + name, 'wb').write(req.content)\ndownload(\n    'https://github.com/googlefonts/noto-fonts/blob/main/hinted/ttf/NotoSansMono/',",
        "detail": "src.frontend.node_modules.plotly.js..circleci.download_google_fonts",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "def load_config(config_file):\n    \"\"\"\n    Load a configuration file into a CfgNode.\n    Args:\n        config_file (str): Path to the YAML configuration file.\n    Returns:\n        CN: The loaded configuration as a CfgNode object.\n    \"\"\"\n    cfg = CN()\n    cfg.set_new_allowed(True)",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "cfg_logger",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "cfg_logger = load_config(\"configs/logger.yml\")\n# Initialize the main configuration and allow new keys\ncfg = CN()\ncfg.set_new_allowed(True)\n# Merge individual configurations into their respective sections in the main config\ncfg.logger = CN()\ncfg.logger.set_new_allowed(True)\ncfg.logger.merge_from_other_cfg(cfg_logger)",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "cfg",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "cfg = CN()\ncfg.set_new_allowed(True)\n# Merge individual configurations into their respective sections in the main config\ncfg.logger = CN()\ncfg.logger.set_new_allowed(True)\ncfg.logger.merge_from_other_cfg(cfg_logger)",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "cfg.logger",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "cfg.logger = CN()\ncfg.logger.set_new_allowed(True)\ncfg.logger.merge_from_other_cfg(cfg_logger)",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "create_logger",
        "kind": 2,
        "importPath": "src.logger",
        "description": "src.logger",
        "peekOfCode": "def create_logger():\n    \"\"\"Create logger object\n    Returns: a logger object\n    \"\"\"\n    # Check if there is any logger handler running\n    if len(logger._core.handlers) < 2 or logger_cfg.log_dir not in logger._core.handlers[1]._name:\n        # Get the current date and time\n        current_time = datetime.datetime.now()\n        # Format the current date and time as a string\n        timestamp = current_time.strftime(logger_cfg.time_format)",
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "delete_old_logs",
        "kind": 2,
        "importPath": "src.logger",
        "description": "src.logger",
        "peekOfCode": "def delete_old_logs(log_dir):\n    \"\"\"Delete log files which created before last 30 days\n    Args:\n        log_dir (str): directory of logs folder\n    \"\"\"\n    today = datetime.date.today()\n    for file_name in os.listdir(log_dir):\n        if file_name.endswith(logger_cfg.log_file_extension):\n            try:\n                log_date = datetime.datetime.strptime(file_name.split(\".\")[0], logger_cfg.time_format).date()",
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger_cfg",
        "kind": 5,
        "importPath": "src.logger",
        "description": "src.logger",
        "peekOfCode": "logger_cfg = cfg.logger\ndef create_logger():\n    \"\"\"Create logger object\n    Returns: a logger object\n    \"\"\"\n    # Check if there is any logger handler running\n    if len(logger._core.handlers) < 2 or logger_cfg.log_dir not in logger._core.handlers[1]._name:\n        # Get the current date and time\n        current_time = datetime.datetime.now()\n        # Format the current date and time as a string",
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.logger",
        "description": "src.logger",
        "peekOfCode": "logger = create_logger()",
        "detail": "src.logger",
        "documentation": {}
    }
]